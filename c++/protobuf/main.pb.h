// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: main.proto

#ifndef PROTOBUF_main_2eproto__INCLUDED
#define PROTOBUF_main_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace test {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_main_2eproto();
void protobuf_AssignDesc_main_2eproto();
void protobuf_ShutdownFile_main_2eproto();

class Test;

// ===================================================================

class Test : public ::google::protobuf::Message {
 public:
  Test();
  virtual ~Test();

  Test(const Test& from);

  inline Test& operator=(const Test& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Test& default_instance();

  void Swap(Test* other);

  // implements Message ----------------------------------------------

  Test* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Test& from);
  void MergeFrom(const Test& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string a = 1;
  inline bool has_a() const;
  inline void clear_a();
  static const int kAFieldNumber = 1;
  inline const ::std::string& a() const;
  inline void set_a(const ::std::string& value);
  inline void set_a(const char* value);
  inline void set_a(const char* value, size_t size);
  inline ::std::string* mutable_a();
  inline ::std::string* release_a();
  inline void set_allocated_a(::std::string* a);

  // optional string b = 2;
  inline bool has_b() const;
  inline void clear_b();
  static const int kBFieldNumber = 2;
  inline const ::std::string& b() const;
  inline void set_b(const ::std::string& value);
  inline void set_b(const char* value);
  inline void set_b(const char* value, size_t size);
  inline ::std::string* mutable_b();
  inline ::std::string* release_b();
  inline void set_allocated_b(::std::string* b);

  // repeated string c = 3;
  inline int c_size() const;
  inline void clear_c();
  static const int kCFieldNumber = 3;
  inline const ::std::string& c(int index) const;
  inline ::std::string* mutable_c(int index);
  inline void set_c(int index, const ::std::string& value);
  inline void set_c(int index, const char* value);
  inline void set_c(int index, const char* value, size_t size);
  inline ::std::string* add_c();
  inline void add_c(const ::std::string& value);
  inline void add_c(const char* value);
  inline void add_c(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& c() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_c();

  // @@protoc_insertion_point(class_scope:test.Test)
 private:
  inline void set_has_a();
  inline void clear_has_a();
  inline void set_has_b();
  inline void clear_has_b();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* a_;
  ::std::string* b_;
  ::google::protobuf::RepeatedPtrField< ::std::string> c_;
  friend void  protobuf_AddDesc_main_2eproto();
  friend void protobuf_AssignDesc_main_2eproto();
  friend void protobuf_ShutdownFile_main_2eproto();

  void InitAsDefaultInstance();
  static Test* default_instance_;
};
// ===================================================================


// ===================================================================

// Test

// optional string a = 1;
inline bool Test::has_a() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Test::set_has_a() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Test::clear_has_a() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Test::clear_a() {
  if (a_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    a_->clear();
  }
  clear_has_a();
}
inline const ::std::string& Test::a() const {
  // @@protoc_insertion_point(field_get:test.Test.a)
  return *a_;
}
inline void Test::set_a(const ::std::string& value) {
  set_has_a();
  if (a_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    a_ = new ::std::string;
  }
  a_->assign(value);
  // @@protoc_insertion_point(field_set:test.Test.a)
}
inline void Test::set_a(const char* value) {
  set_has_a();
  if (a_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    a_ = new ::std::string;
  }
  a_->assign(value);
  // @@protoc_insertion_point(field_set_char:test.Test.a)
}
inline void Test::set_a(const char* value, size_t size) {
  set_has_a();
  if (a_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    a_ = new ::std::string;
  }
  a_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:test.Test.a)
}
inline ::std::string* Test::mutable_a() {
  set_has_a();
  if (a_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    a_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:test.Test.a)
  return a_;
}
inline ::std::string* Test::release_a() {
  clear_has_a();
  if (a_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = a_;
    a_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Test::set_allocated_a(::std::string* a) {
  if (a_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete a_;
  }
  if (a) {
    set_has_a();
    a_ = a;
  } else {
    clear_has_a();
    a_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:test.Test.a)
}

// optional string b = 2;
inline bool Test::has_b() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Test::set_has_b() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Test::clear_has_b() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Test::clear_b() {
  if (b_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    b_->clear();
  }
  clear_has_b();
}
inline const ::std::string& Test::b() const {
  // @@protoc_insertion_point(field_get:test.Test.b)
  return *b_;
}
inline void Test::set_b(const ::std::string& value) {
  set_has_b();
  if (b_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    b_ = new ::std::string;
  }
  b_->assign(value);
  // @@protoc_insertion_point(field_set:test.Test.b)
}
inline void Test::set_b(const char* value) {
  set_has_b();
  if (b_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    b_ = new ::std::string;
  }
  b_->assign(value);
  // @@protoc_insertion_point(field_set_char:test.Test.b)
}
inline void Test::set_b(const char* value, size_t size) {
  set_has_b();
  if (b_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    b_ = new ::std::string;
  }
  b_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:test.Test.b)
}
inline ::std::string* Test::mutable_b() {
  set_has_b();
  if (b_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    b_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:test.Test.b)
  return b_;
}
inline ::std::string* Test::release_b() {
  clear_has_b();
  if (b_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = b_;
    b_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Test::set_allocated_b(::std::string* b) {
  if (b_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete b_;
  }
  if (b) {
    set_has_b();
    b_ = b;
  } else {
    clear_has_b();
    b_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:test.Test.b)
}

// repeated string c = 3;
inline int Test::c_size() const {
  return c_.size();
}
inline void Test::clear_c() {
  c_.Clear();
}
inline const ::std::string& Test::c(int index) const {
  // @@protoc_insertion_point(field_get:test.Test.c)
  return c_.Get(index);
}
inline ::std::string* Test::mutable_c(int index) {
  // @@protoc_insertion_point(field_mutable:test.Test.c)
  return c_.Mutable(index);
}
inline void Test::set_c(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:test.Test.c)
  c_.Mutable(index)->assign(value);
}
inline void Test::set_c(int index, const char* value) {
  c_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:test.Test.c)
}
inline void Test::set_c(int index, const char* value, size_t size) {
  c_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:test.Test.c)
}
inline ::std::string* Test::add_c() {
  return c_.Add();
}
inline void Test::add_c(const ::std::string& value) {
  c_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:test.Test.c)
}
inline void Test::add_c(const char* value) {
  c_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:test.Test.c)
}
inline void Test::add_c(const char* value, size_t size) {
  c_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:test.Test.c)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Test::c() const {
  // @@protoc_insertion_point(field_list:test.Test.c)
  return c_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Test::mutable_c() {
  // @@protoc_insertion_point(field_mutable_list:test.Test.c)
  return &c_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace test

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_main_2eproto__INCLUDED
